<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mischa Taylor's Coding Blog]]></title>
  <link href="http://misheska.com/atom.xml" rel="self"/>
  <link href="http://misheska.com/"/>
  <updated>2013-06-22T14:01:12-07:00</updated>
  <id>http://misheska.com/</id>
  <author>
    <name><![CDATA[Mischa Taylor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started writing Chef cookbooks the Berkshelf Way]]></title>
    <link href="http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/"/>
    <updated>2013-06-16T03:49:00-07:00</updated>
    <id>http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#getting-started">Getting Started</a>    <ul>
      <li><a href="#upgrade-from-berkshelf-1x">Upgrade from Berkshelf 1.x</a></li>
    </ul>
  </li>
  <li><a href="#create-the-myface-application-cookbook">Create the MyFace Application Cookbook</a></li>
  <li><a href="#prepare-a-virtual-machine-for-testing">Prepare a virtual machine for testing</a></li>
  <li><a href="#iteration-1-create-an-application-user">Iteration #1: Create an application user</a>    <ul>
      <li><a href="#testing-iteration-1">Testing Iteration #1</a></li>
    </ul>
  </li>
  <li><a href="#iteration-2---refactor-to-attributes">Iteration #2 - Refactor to attributes</a>    <ul>
      <li><a href="#testing-iteration-2">Testing Iteration #2</a></li>
    </ul>
  </li>
  <li><a href="#iteration-3---install-the-apache2-web-server">Iteration #3 - Install the Apache2 Web Server</a>    <ul>
      <li><a href="#testing-iteration-3">Testing Iteration #3</a></li>
    </ul>
  </li>
  <li><a href="#iteration-4---add-content">Iteration #4 - Add Content</a>    <ul>
      <li><a href="#testing-iteration-4">Testing Iteration #4</a></li>
    </ul>
  </li>
  <li><a href="#iteration-5---refactoring-webserver">Iteration #5 - Refactoring webserver</a>    <ul>
      <li><a href="#testing-iteration-5">Testing Iteration #5</a></li>
    </ul>
  </li>
  <li><a href="#more-to-come">More to come!</a></li>
</ul>

<p>Jamie Winsor hasn’t yet updated his <a href="http://vialstudios.com/guide-authoring-cookbooks.html">guide to authoring cookbooks the Berkshelf way</a>
to match <a href="https://github.com/RiotGames/berkshelf/issues/416">recent changes related to Vagrant 1.x</a> and <a href="http://www.opscode.com/blog/2013/03/11/chef-11-server-up-and-running/">Chef 11</a>
This post is an attempt to update these instructions, walking through his
and Sean O’Meara’s example app - <a href="https://github.com/reset/myface-cookbook">MyFace</a>.
For more information on <a href="http://berkshelf.com/">Berkshelf</a>, check out his recent
<a href="http://www.youtube.com/watch?v=hYt0E84kYUI">talk</a>
and <a href="http://www.slideshare.net/resetexistence/the-berkshelf-way">slides</a>
from ChefConf 2013.</p>

<h1 id="getting-started">Getting Started</h1>
<p>You can write Chef Cookbooks with Berkshelf on Mac OS X, Linux or Windows.
To set up your cookbook-writing environment, make sure you have the following
installed:</p>

<ul>
  <li>
    <p><a href="http://virtualbox.org">Install VirtualBox 4.2.x (or higher)</a></p>
  </li>
  <li>
    <p><a href="http://vagrantup.com">Install Vagrant 1.2.1 (or higher)</a></p>
  </li>
  <li>
    <p>Install Ruby 1.9.x via <a href="http://misheska.com/blog/2013/06/16/use-opscode-chef-omnibus-ruby-for-writing-cookbooks/">Chef Omnibus Installer Ruby</a>, <a href="http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/">rvm</a> or <a href="http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby/">rbenv</a></p>
  </li>
  <li>
    <p>Install Berkshelf</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install berkshelf --no-ri --no-rdoc
</span><span class="line">Fetching: berkshelf-2.0.5.gem (100%)
</span><span class="line">Successfully installed berkshelf-2.0.5
</span><span class="line">1 gem installed
</span><span class="line">$ berks -v
</span><span class="line">Berkshelf (2.0.5)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Install the vagrant-berkshelf Plugin (1.3.2 or higher)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant plugin install vagrant-berkshelf
</span><span class="line">Installing the 'vagrant-berkshelf' plugin. This can take a few minutes...
</span><span class="line">Installed the plugin 'vagrant-berkshelf (1.3.2)'!</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Install the vagrant-omnibus plugin (1.1.0 or higher)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant plugin install vagrant-omnibus
</span><span class="line">Installing the 'vagrant-omnibus' plugin.  This can take a few minutes...
</span><span class="line">Installed the plugin 'vagrant-omnibus (1.1.0)'!</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="upgrade-from-berkshelf-1x">Upgrade from Berkshelf 1.x</h2>
<p>NOTE: If you had a previous 1.x version of the berkshelf plugin installed,
when it was named <code>berkshelf-vagrant</code>, which you can verify by running
the following command:</p>

<pre><code>$ vagrant plugin list
berkshelf-vagrant (1.1.3)
</code></pre>

<p>Make sure you fully uninstall the old <code>berkshelf-vagrant</code> plugin before
installing the new <code>vagrant-berkshelf</code> plugin, as vagrant will get confused
by the name change:</p>

<pre><code>$ vagrant plugin uninstall berkshelf-vagrant
Uninstalling the 'berkshelf-vagrant' plugin...
$ vagrant plugin install vagrant-berkshelf
Installing the 'vagrant-berkshelf' plugin.  This can take a few minutes...
</code></pre>

<h1 id="create-the-myface-application-cookbook">Create the MyFace Application Cookbook</h1>
<p>Key to the Berkshelf way is the use of the Application Cookbook Pattern.  An
application cookbook contains the list of recipes needed to build your
application or service.  As an example, this blog post will walk you through
the creation of an example service - MyFace - the next killer social web app.</p>

<p>First create a new cookbook for the MyFace application using the
<code>berks cookbook</code> command:</p>

<pre><code>$ berks cookbook myface
      create  myface/files/default
      create  myface/templates/default
      create  myface/attributes
      create  myface/definitions
      create  myface/libraries
      create  myface/providers
      create  myface/recipes
      create  myface/resources
      create  myface/recipes/default.rb
      create  myface/metadata.rb
      create  myface/LICENSE
      create  myface/README.md
      create  myface/Berksfile
      create  myface/Thorfile
      create  myface/chefignore
      create  myface/.gitignore
         run  git init from "./myface"
      create  myface/Gemfile
      create  .kitchen.yml
      append  Thorfile
      create  test/integration/default
      append  .gitignore
      append  .gitignore
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
      create  myface/Vagrantfile
</code></pre>

<p>Before running <code>bundle install</code> edit the <code>Gemfile</code> and add a version
constraint for the <code>test-kitchen</code> gem, like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/Gemfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;berkshelf&#39;</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;test-kitchen&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0.0.alpha&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:integration</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;kitchen-vagrant&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:integration</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run <code>bundle install</code> in the newly created cookbook directory to install the
necessary Gem dependencies:</p>

<pre><code>$ cd myface
$ bundle install
Fetching gem metadata from https://rubygems.org/........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using i18n (0.6.1)
Using multi_json (1.7.7)
Using activesupport (3.2.13)
. . .
Using test-kitchen (1.0.0.alpha.7)
Using kitchen-vagrant (0.10.0)
Using bundler (1.3.5)
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
</code></pre>

<p>If you get the following error, you forgot to add a version-constraint
for <code>test-kitchen</code>, per above:</p>

<pre><code>Bundler could not find compatible versions for gem "test-kitchen":
  In Gemfile:
    kitchen-vagrant (&gt;= 0) ruby depends on
      test-kitchen (~&gt; 1.0.0.alpha.0) ruby

    test-kitchen (0.5.0)
</code></pre>

<h1 id="prepare-a-virtual-machine-for-testing">Prepare a virtual machine for testing</h1>
<p>It’s a good idea to develop your cookbook incrementally, testing 
in short iterations.  Berkshelf integrates with Vagrant to deploy
your cookbook changes to a virtual machine for testing.</p>

<p>Ensure that the <code>vagrant-omnibus</code> plugin is installed correctly.</p>

<pre><code>$ vagrant plugin list
...
vagrant-omnibus (1.1.0)
...
</code></pre>

<p>The <code>vagrant-omnibus</code> plugin hooks into Vagrant and allows you to specify
the version of the Chef Omnibus package you want installed using the
<code>omnibus.chef_version</code> key</p>

<p>Edit the Vagrantfile generated by the <code>berks cookbook</code> command to use
a VirtualBox template that does not have a version of Chef provisioned.
Then, specify that you want your image to always use the latest version
of Chef. (By default Berkshelf points to an image with an older version
of CentOS, Chef 11.2.0, which is also old).  Your Vagrantfile should look
like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/Vagrantfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;myface-berkshelf&quot;</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;misheska-centos-6.4&quot;</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;https://www.dropbox.com/s/y42egyh9cqsge24/misheska-centos-6.4.box&quot;</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">omnibus</span><span class="o">.</span><span class="n">chef_version</span> <span class="o">=</span> <span class="ss">:latest</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;33.33.33.10&quot;</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">max_tries</span> <span class="o">=</span> <span class="mi">40</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">120</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">berkshelf</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:chef_solo</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class="line">    <span class="n">chef</span><span class="o">.</span><span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">      <span class="ss">:mysql</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="ss">:server_root_password</span> <span class="o">=&gt;</span> <span class="s1">&#39;rootpass&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="ss">:server_debian_password</span> <span class="o">=&gt;</span> <span class="s1">&#39;debpass&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="ss">:server_repl_password</span> <span class="o">=&gt;</span> <span class="s1">&#39;replpass&#39;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">chef</span><span class="o">.</span><span class="n">run_list</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">      <span class="s2">&quot;recipe[myface::defult]&quot;</span>
</span><span class="line">    <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run <code>vagrant up</code> to start up the virtual machine and to test the stub MyFace
cookbook you just created:</p>

<pre><code>$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
[default] Box 'mishesksa-centos-6.4' was not found. Fetching box from specified URL for
the provider 'virtualbox'. Note that if the URL does not have
a box for this provider, you should interrupt Vagrant now and add
the box yourself. Otherwise Vagrant will attempt to download the
full box prior to discovering this error.
Downloading or copying the box...
Extracting box...te: 3449k/s, Estimated time remaining: 0:00:01)
Successfully added box 'mishesksa-centos-6.4' with provider 'virtualbox'!
[default] Importing base box 'mishesksa-centos-6.4'...
[default] Matching MAC address for NAT networking...
[default] Setting the name of the VM...
[default] Clearing any previously set forwarded ports...
[Berkshelf] This version of the Berkshelf plugin has not been fully tested on this version of Vagrant.
[Berkshelf] You should check for a newer version of vagrant-berkshelf.
[Berkshelf] If you encounter any errors with this version, please report them at https://github.com/RiotGames/vagrant-berkshelf/issues
[Berkshelf] You can also join the discussion in #berkshelf on Freenode.
[Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130616-17393-1q2qkbs'
[Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/xx/myface'
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 22 =&gt; 2222 (adapter 1)
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Ensuring Chef is installed at requested version of 11.4.4.
[default] Chef 11.4.4 Omnibus package is not installed...installing now.
Downloading Chef 11.4.4 for el...
Installing Chef 11.4.4
warning: /tmp/tmp.Ro7kRMDB/chef-11.4.4.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 83ef826a: NOKEY
Preparing...                ##################################################
chef                        ##################################################
Thank you for installing Chef!
[default] Setting hostname...
[default] Configuring and enabling network interfaces...
[default] Mounting shared folders...
[default] -- /vagrant
[default] -- /tmp/vagrant-chef-1/chef-solo-1/cookbooks
[default] Running provisioner: chef_solo...
Generating chef JSON and uploading...
Running chef-solo...
[2013-06-16T10:28:25-07:00] INFO: *** Chef 11.4.4 ***
[2013-06-16T10:28:25-07:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
[2013-06-16T10:28:25-07:00] INFO: Run List is [recipe[myface::default]]
[2013-06-16T10:28:25-07:00] INFO: Run List expands to [myface::default]
[2013-06-16T10:28:25-07:00] INFO: Starting Chef Run for myface-berkshelf
[2013-06-16T10:28:25-07:00] INFO: Running start handlers
[2013-06-16T10:28:25-07:00] INFO: Start handlers complete.
[2013-06-16T10:28:25-07:00] INFO: Chef Run complete in 0.027690068 seconds
[2013-06-16T10:28:25-07:00] INFO: Running report handlers
[2013-06-16T10:28:25-07:00] INFO: Report handlers complete
</code></pre>

<p>If all goes well, you should see <code>Chef Run complete</code> with no errors.</p>

<p>NOTE: The basebox URL comes from my current collection of baseboxes.  The
following link points to a README file which provides links to all the
vagrant baseboxes I use (which I normally update frequently):
<a href="https://github.com/misheska/basebox">https://github.com/misheska/basebox</a></p>

<p>If you would ever like to delete your test virtual machine and start over,
you can destroy your test virtual machine with the <code>vagrant destroy</code> command:</p>

<pre><code>$ vagrant destroy
Are you sure you want to destroy the 'default' VM? [y/N] y
[default] Forcing shutdown of VM...
[default] Destroying VM and associated drives...
[Berkshelf] Cleaning Vagrant's berkshelf
</code></pre>

<p>Run <code>vagrant up</code> to recreate the test virtual machine.</p>

<p><strong>NOTE:</strong> If you just ran <code>vagrant destroy</code> make sure you run <code>vagrant up</code>
before proceeding to the next section.</p>

<h1 id="iteration-1-create-an-application-user">Iteration #1: Create an application user</h1>
<p>For our first short iteration, let’s create a <code>myface</code> user under which
we’ll run our application.  One best practice is to avoid running
applications as root and create a user/group under which the application runs
instead who has just enough rights that the app needs.</p>

<p>Edit <code>myface/recipes/default.rb</code> defining a new <a href="http://docs.opscode.com/resource_group.html">Group Resource</a>
and <a href="http://docs.opscode.com/resource_user.html">User Resource</a> for myface,
so it looks like the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Cookbook Name:: myface</span>
</span><span class="line"><span class="c1"># Recipe:: default</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="s2">&quot;myface&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">user</span> <span class="s2">&quot;myface&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">group</span> <span class="s2">&quot;myface&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save <code>receipes/default.rb</code> and re-run <code>vagrant provision</code> to create the
myface user on your test virtual machine:</p>

<pre><code>$ vagrant provision
[default] Ensuring Chef is installed at requested version of 11.4.4.
[default] Chef 11.4.4 Omnibus package is already installed...skipping installation.
[Berkshelf] This version of the Berkshelf plugin has not been fully tested on this version of Vagrant.
[Berkshelf] You should check for a newer version of vagrant-berkshelf.
[Berkshelf] If you encounter any errors with this version, please report them at https://github.com/RiotGames/vagrant-berkshelf/issues
[Berkshelf] You can also join the discussion in #berkshelf on Freenode.
[Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130616-17393-1q2qkbs'
[Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/xx/myface'
[default] Running provisioner: chef_solo...
Generating chef JSON and uploading...
Running chef-solo...
[2013-06-16T10:36:32-07:00] INFO: *** Chef 11.4.4 ***
[2013-06-16T10:36:32-07:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
[2013-06-16T10:36:32-07:00] INFO: Run List is [recipe[myface::default]]
[2013-06-16T10:36:32-07:00] INFO: Run List expands to [myface::default]
[2013-06-16T10:36:32-07:00] INFO: Starting Chef Run for myface-berkshelf
[2013-06-16T10:36:32-07:00] INFO: Running start handlers
[2013-06-16T10:36:32-07:00] INFO: Start handlers complete.
[2013-06-16T10:36:32-07:00] INFO: Processing group[myface] action create (myface::default line 10)
[2013-06-16T10:36:32-07:00] INFO: group[myface] created
[2013-06-16T10:36:32-07:00] INFO: Processing user[myface] action create (myface::default line 12)
[2013-06-16T10:36:32-07:00] INFO: user[myface] created
[2013-06-16T10:36:32-07:00] INFO: Chef Run complete in 0.144073876 seconds
[2013-06-16T10:36:32-07:00] INFO: Running report handlers
[2013-06-16T10:36:32-07:00] INFO: Report handlers complete
</code></pre>

<p>You should expect to see the Chef run complete with no errors.  Notice
that it also creates <code>group[myface]</code> and <code>user[myface]</code>.</p>

<h2 id="testing-iteration-1">Testing Iteration #1</h2>

<p>Verify that Chef actually created the myface user on our test virtual
machine by running the following:</p>

<pre><code>$ vagrant ssh -c "getent passwd myface"
myface:x:497:503::/home/myface:/bin/bash
</code></pre>

<p>We use <code>vagrant ssh -c</code> to run a command on our test virtual machine.  The
<code>getent</code> command can be used to query all user databases.  In this
case we’re looking for <code>myface</code>, and it exists!</p>

<p>Because we are using well-defined resources that are completely
<a href="http://en.wikipedia.org/wiki/Idempotence">idempotent</a>, you should notice
that if you run <code>vagrant provision</code> again, the Chef run executes more quickly
and it does not try to re-create the user/group it already created.</p>

<pre><code>$ vagrant provision
[default] Ensuring Chef is installed at requested version of 11.4.4.
[default] Chef 11.4.4 Omnibus package is already installed...skipping installation.
[Berkshelf] This version of the Berkshelf plugin has not been fully tested on this version of Vagrant.
[Berkshelf] You should check for a newer version of vagrant-berkshelf.
[Berkshelf] If you encounter any errors with this version, please report them at https://github.com/RiotGames/vagrant-berkshelf/issues
[Berkshelf] You can also join the discussion in #berkshelf on Freenode.
[Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130616-17393-1q2qkbs'
[Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/xx/myface'
[default] Running provisioner: chef_solo...
Generating chef JSON and uploading...
Running chef-solo...
[2013-06-16T10:39:11-07:00] INFO: *** Chef 11.4.4 ***
[2013-06-16T10:39:12-07:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
[2013-06-16T10:39:12-07:00] INFO: Run List is [recipe[myface::default]]
[2013-06-16T10:39:12-07:00] INFO: Run List expands to [myface::default]
[2013-06-16T10:39:12-07:00] INFO: Starting Chef Run for myface-berkshelf
[2013-06-16T10:39:12-07:00] INFO: Running start handlers
[2013-06-16T10:39:12-07:00] INFO: Start handlers complete.
[2013-06-16T10:39:12-07:00] INFO: Processing group[myface] action create (myface::default line 10)
[2013-06-16T10:39:12-07:00] INFO: Processing user[myface] action create (myface::default line 12)
[2013-06-16T10:39:12-07:00] INFO: Chef Run complete in 0.033772034 seconds
[2013-06-16T10:39:12-07:00] INFO: Running report handlers
[2013-06-16T10:39:12-07:00] INFO: Report handlers complete
</code></pre>

<h1 id="iteration-2---refactor-to-attributes">Iteration #2 - Refactor to attributes</h1>
<p>What if at some point you wanted to change the name of the <code>myface</code> user/group
you just created to something else?  At the moment, you would need to edit
<code>myface/recipes/default.rb</code> in three places.</p>

<p>Let’s create a new file called <code>myface/attributes/default.rb</code> which
initializes Chef <a href="http://docs.opscode.com/essentials_cookbook_attribute_files.html">attributes</a>
defining the user name and group name under which our application will run so
that you <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">don’t repeat yoursef</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/attributes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;myface&quot;</span>
</span><span class="line"><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;myface&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Chef, attributes are a hash of a hash used to override the default settings
on a node.  The first hash is the cookbook name - in our
case we’ve named our cookbook <code>:myface</code>. The second hash is the name of
our attribute - in this case, we’re defining two new attributes: <code>:user</code> and
<code>:group</code>.</p>

<p><code>default</code> implies the use of the <a href="http://docs.opscode.com/chef/essentials_node_object.html">node object</a>
<code>node.default</code> and is a Chef attribute file shorthand.  The following are
equivalent definitions to the ones above:</p>

<pre><code>node.default[:myface][:user] = "myface"
noce.default[:myface][:user] = "myface"
</code></pre>

<p>Also note the use of symbols instead of strings.  It is <a href="http://www.robertsosinski.com/2009/01/11/the-difference-between-ruby-symbols-and-strings/">strongly recommended
that you use symbols instead of strings</a>
for hash indexes. </p>

<p>Now that you’ve created your attribute definitions, edit
<code>myface/recipes/default.rb</code> and replace all references to the “myface” user name
with <code>node[:myface][:user]</code> and all references to the “myface” group with
<code>node[:myface][:group]</code>.  <code>myface/recipes/default.rb</code> should now look like
this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Cookbook Name:: myface</span>
</span><span class="line"><span class="c1"># Recipe:: default</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line">  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">  <span class="nb">system</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Re-provision with <code>vagrant provision</code> to see how the refactor went:</p>

<pre><code>$ vagrant provision
</code></pre>

<p>As long as you didn’t create any syntax errors in your refactoring file edits,
there should be no net change on the virtual machine test node (as you’ve only
just moved some strings into a node attribute).  </p>

<h2 id="testing-iteration-2">Testing Iteration #2</h2>

<p>Running  <code>getent</code> on the test virtual machine should also produce the same
result as when you validated Iteration #1:</p>

<pre><code>$ vagrant ssh -c "getent passwd myface"
myface:x:497:503::/home/myface:/bin/bash
</code></pre>

<h1 id="iteration-3---install-the-apache2-web-server">Iteration #3 - Install the Apache2 Web Server</h1>
<p>Our hot new social networking application, myface, is a web app, so we need
to install a web server.  Let’s install the Apache2 web server.</p>

<p>Modify <code>myface/recipes/default.rb</code> to include the apache2 cookbook’s default
recipe:</p>

<pre><code>include_recipe "apache2"
</code></pre>

<p>The resultant <code>myface/recipes/default.rb</code> file should look like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Cookbook Name:: myface</span>
</span><span class="line"><span class="c1"># Recipe:: default</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line">  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">  <span class="nb">system</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">include_recipe</span> <span class="s2">&quot;apache2&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since you are loading Apache2 from another cookbook, you need to configure the
dependency in your metadata.  Edit <code>myface/metadata.rb</code> and add the <code>apache2</code>
dependency at the bottom:</p>

<pre><code>depends "apache2", "~&gt; 1.6.0"
</code></pre>

<p>This tells Chef that the myface cookbook depends on the apache2 cookbook.
We’ve also specified a version constraint using the optimistic operator
<code>~&gt;</code> to tell our Chef that we want the latest version of the apache2 cookbook
that is greater than 1.6.0 but <em>not</em> 1.7.0 or higher.</p>

<p>It is recommended that Chef cookbooks follow a
<a href="http://semver.org/">Semantic Versioning</a> scheme.  So if you write your
cookbook to use the latest apache2 1.6.x cookbook, if the apache2 cookbook is
ever bumped to a 1.7.x version (or 2.x), it has some public API functionality
that has at least been deprecated.  So you’ll want to review the changes and
test before automatically using an apache2 cookbook version 1.7.x or higher.
However, automatic use of any new 1.6.x is perfectly fine, because no
only backwards-compatible bug fixes has been introduced.  Semantic Versioning
guarantees there are no changes in the public APIs.</p>

<p>Your <code>myface/metadata.rb</code> should look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/attributes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">name</span>             <span class="s2">&quot;myface&quot;</span>
</span><span class="line"><span class="n">maintainer</span>       <span class="s2">&quot;YOUR_NAME&quot;</span>
</span><span class="line"><span class="n">maintainer_email</span> <span class="s2">&quot;YOUR_EMAIL&quot;</span>
</span><span class="line"><span class="n">license</span>          <span class="s2">&quot;All rights reserved&quot;</span>
</span><span class="line"><span class="n">description</span>      <span class="s2">&quot;Installs/Configures myface&quot;</span>
</span><span class="line"><span class="n">long_description</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s1">&#39;README.md&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">version</span>          <span class="s2">&quot;0.1.0&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">depends</span> <span class="s2">&quot;apache2&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.6.0&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now when you re-run <code>vagrant provision</code> it will install apache2 on your
test virtual machine:</p>

<pre><code>$ vagrant provision
...
[2013-03-27T06:30:41+00:00] INFO: service[apache2] restarted
[2013-03-27T06:30:41+00:00] INFO: execute[a2enmod deflate] sending restart action to service[apache2] (delayed)
[2013-03-27T06:30:41+00:00] INFO: Processing service[apache2] action restart (apache2::default line 24)
[2013-03-27T06:30:43+00:00] INFO: service[apache2] restarted
[2013-03-27T06:30:43+00:00] INFO: Chef Run complete in 59.309557362 seconds
[2013-03-27T06:30:43+00:00] INFO: Running report handlers
[2013-03-27T06:30:43+00:00] INFO: Report handlers complete
</code></pre>

<h2 id="testing-iteration-3">Testing Iteration #3</h2>

<p>You can verify that the apache2 <code>httpd</code> service is running on your berkshelf
virtual machine with the following command:</p>

<pre><code>$ vagrant ssh -c "sudo /sbin/service httpd status"
httpd (pid 5206) is running.
</code></pre>

<p>Since this is a web server, so you can also check it out in your favorite web
browser.  The host-only private network address for the virtual machine
that Berkshelf created is in the <code>Vagrantfile</code>.  Display the IP address with
the following command:</p>

<pre><code>$ grep ip: Vagrantfile
config.vm.network :private_network, ip: "33.33.33.10"
</code></pre>

<p>Check it out with your favorite web browser:</p>

<p><a href="http://33.33.33.10">http://33.33.33.10</a></p>

<p>While you will get a <code>404 Not Found</code> error because we haven’t added any
content to our web site yet, the important part is that <code>Apache Server
at 33.33.33.10 Port 80</code> sent the response:</p>

<p><img src="http://misheska.com/images/apachewebserver.png" alt="Apache Server Response" /></p>

<p>Wait a second, though.  You never downloaded the <code>apache2</code> cookbook!
That’s the magic of the Berkshelf Vagrant plugin you installed earlier.  The
Berkshelf Vagrant plugin will make sure that any changes you make to your
cookbook and all of your cookbook’s dependencies are made available to your
virtual machine.  Berkshelf automatically loads all your cookbook dependencies
much like Bundler automatically loads all your gem dependencies.</p>

<p>Where does the Berkshelf put the cookbooks it downloads?  You can find them
in <code>~/.berkshelf/cookbooks</code></p>

<pre><code>Users/misheska/.berkshelf/cookbooks
└── apache2-1.6.0
    ├── attributes
    ├── definitions
    ├── files
    │   └── default
    │       └── tests
    │           └── minitest
    │               └── support
    ├── recipes
    └── templates
        └── default
            └── mods
</code></pre>

<p><code>~/.berkshelf</code> is just the default location where Berkshelf stores data
on your local disk.  This location can be altered by setting the environment
variable <code>BERKSHELF_PATH</code>.</p>

<h1 id="iteration-4---add-content">Iteration #4 - Add Content</h1>
<p>Let’s add some content to make that 404 go away.  Edit
<code>myface/recipes/default.rb</code> as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Cookbook Name:: myface</span>
</span><span class="line"><span class="c1"># Recipe:: default</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line">  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">  <span class="nb">system</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">include_recipe</span> <span class="s2">&quot;apache2&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># disable default site</span>
</span><span class="line"><span class="n">apache_site</span> <span class="s2">&quot;000-default&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">enable</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># create apache config</span>
</span><span class="line"><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="s2">/sites-available/myface.conf&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">source</span> <span class="s2">&quot;apache2.conf.erb&quot;</span>
</span><span class="line">  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s1">&#39;service[apache2]&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># create document root</span>
</span><span class="line"><span class="n">directory</span> <span class="s2">&quot;/srv/apache/myface&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">action</span> <span class="ss">:create</span>
</span><span class="line">  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># write siteX</span>
</span><span class="line"><span class="n">template</span> <span class="s2">&quot;/srv/apache/myface/index.html&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">source</span> <span class="s2">&quot;index.html.erb&quot;</span>
</span><span class="line">  <span class="n">mode</span> <span class="s2">&quot;0644&quot;</span> <span class="c1"># forget me to create debugging exercise</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># enable myface</span>
</span><span class="line"><span class="n">apache_site</span> <span class="s2">&quot;myface.conf&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">enable</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you’re familiar with Chef and configuring a web app via apache2, nothing
here should be too surprising.  But if not, spend some time reading up on
the resource references at <a href="http://docs.opscode.com">http://docs.opscode.com</a></p>

<p>With Chef, you can create config files from templates using
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html">ERB</a>, a
Ruby templating system.  Create a new template file called
<code>myface/templates/default/apache2.conf.erb</code> which will become the
file <code>.../sites-available/myface.conf</code> on our test virtual machine
(refer to <code>myface/recipes/default.rb</code> above):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/templates/default/apache2.conf.erb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Managed by Chef for &lt;%= node[:hostname] %&gt;</span>
</span><span class="line">
</span><span class="line"><span class="no">Alias</span> <span class="o">/</span> <span class="sr">/srv/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="o">/</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="no">Directory</span> <span class="sr">/srv/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span> <span class="o">&gt;</span>
</span><span class="line">	<span class="no">Options</span> <span class="no">FollowSymLinks</span> <span class="o">+</span><span class="no">Indexes</span>
</span><span class="line">	<span class="no">Allow</span> <span class="n">from</span> <span class="no">All</span>
</span><span class="line"><span class="o">&lt;</span><span class="sr">/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also create our web site content as <code>myface/templates/default/index.html.erb</code>.
While it doesn’t take advantage of ERB templating yet, it will in further
iterations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/templates/default/index.html.erb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Welcome</span> <span class="n">to</span> <span class="no">MyFace</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After you have created these three files, run <code>vagrant provision</code> to deploy
your changes:</p>

<pre><code>$ vagrant provision
</code></pre>

<h2 id="testing-iteration-4">Testing Iteration #4</h2>

<p>If the Chef run completed successfully, if you point your web browser at your
myface web site again:</p>

<p><a href="http://33.33.33.10">http://33.33.33.10</a></p>

<p>You’ll see some lovely content!</p>

<p><img src="http://misheska.com/images/welcometomyface.png" alt="Welcome to MyFace" /></p>

<h1 id="iteration-5---refactoring-webserver">Iteration #5 - Refactoring webserver</h1>
<p><code>myface/recipes/default.rb</code> is getting rather large and we’ve got a lot more
to add to our cookbook.  Let’s go through another refactoring pass.</p>

<p>Let’s move all the webserver-related resources to their own file
<code>myface/recipes/webserver.rb</code>.  Rename <code>myface/recipes/default.rb</code> to
<code>myface/recipes/webserver.rb</code>.</p>

<p>Now <code>myface/recipes/webserver.rb</code> should look like this: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/recipes/webserver.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Cookbook Name:: myface</span>
</span><span class="line"><span class="c1"># Recipe:: webserver</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line">  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span>
</span><span class="line">  <span class="nb">system</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">include_recipe</span> <span class="s2">&quot;apache2&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># disable default site</span>
</span><span class="line"><span class="n">apache_site</span> <span class="s2">&quot;000-default&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">enable</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># create apache config</span>
</span><span class="line"><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="s2">/sites-available/myface.conf&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">source</span> <span class="s2">&quot;apache2.conf.erb&quot;</span>
</span><span class="line">  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s1">&#39;service[apache2]&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># create document root</span>
</span><span class="line"><span class="n">directory</span> <span class="s2">&quot;/srv/apache/myface&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">action</span> <span class="ss">:create</span>
</span><span class="line">  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># write siteX</span>
</span><span class="line"><span class="n">template</span> <span class="s2">&quot;/srv/apache/myface/index.html&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">source</span> <span class="s2">&quot;index.html.erb&quot;</span>
</span><span class="line">  <span class="n">mode</span> <span class="s2">&quot;0644&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># enable myface</span>
</span><span class="line"><span class="n">apache_site</span> <span class="s2">&quot;myface.conf&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">enable</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Create a new <code>myface/recipes/default.rb</code> file which references <code>webserver.rb</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Cookbook Name:: myface</span>
</span><span class="line"><span class="c1"># Recipe:: default</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="n">include_recipe</span> <span class="s2">&quot;myface::webserver&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Converge your node again to make sure there are no syntax errors:</p>

<pre><code>$ vagrant provision
</code></pre>

<h2 id="testing-iteration-5">Testing Iteration #5</h2>

<p>Visiting <a href="http://33.33.33.10">http://33.33.33.10</a> should produce the same result as before as you
have made no net changes, just shuffled things around a bit.</p>

<h1 id="more-to-come">More to come!</h1>
<p>This is just part one of a multi-part series.  So far you’ve gone through
several short iteration loops as you evolve the myface cookbook.  In subsequent
installments, we’ll go through more iterations, resulting in the final
end product: <a href="https://github.com/misheska/myface">https://github.com/misheska/myface</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Opscode Chef Omnibus Ruby for writing cookbooks]]></title>
    <link href="http://misheska.com/blog/2013/06/16/use-opscode-chef-omnibus-ruby-for-writing-cookbooks/"/>
    <updated>2013-06-16T02:35:00-07:00</updated>
    <id>http://misheska.com/blog/2013/06/16/use-opscode-chef-omnibus-ruby-for-writing-cookbooks</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#how-to-set-up-omnibus-chef-ruby-on-mac-os-x">How to set up Omnibus Chef Ruby on Mac OS X</a></li>
  <li><a href="#how-to-set-up-omnibus-chef-ruby-on-linux">How to set up Omnibus Chef Ruby on Linux</a></li>
  <li><a href="#how-to-set-up-omnibus-chef-ruby-on-windows">How to set up Omnibus Chef Ruby on Windows</a></li>
</ul>

<p>If your only use of Ruby is because you want to write cookbooks for Opscode
Chef, rather than going through the bother of setting up a full Ruby
development environment via <a href="http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/">rvm</a> or <a href="http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby/">rbenv</a>
you can just reuse the Ruby 1.9.x environment that is bundled with the
Opscode Omnibus Chef installer.</p>

<p>In this post, I’ll cover how to configure the Ruby 1.9.x interpreter bundled
with the Opscode Omnibus Chef installer on Mac OS X, Linux and Windows so
it can be used for writing cookbooks.</p>

<h1 id="how-to-set-up-omnibus-chef-ruby-on-mac-os-x">How to set up Omnibus Chef Ruby on Mac OS X</h1>
<p>First install Apple Xcode, which includes a C compiler needed to build the
tools required for cookbook development from source (like
<a href="http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/">Berkshelf</a> ).
Download and install the latest version of Xcode from the App Store, if you
don’t have it installed already.  Also make sure you install the <em>Command Line
Tools</em> by choosing the menu item <code>Xcode -&gt; Preferences...</code> and click
on the <em>Downloads</em> tab.  Click on the <em>Install</em> button to download the
Command Line Tools.
<img src="http://misheska.com/images/xcodecommandline.png" alt="Xcode Command Line Tools" /></p>

<p>In a web browser, go to the <a href="http://www.opscode.com/chef/install">http://www.opscode.com/chef/install</a> page to
display the instructions for installing the Chef Client via the Opscode
Omnibus Chef installer.</p>

<p>As of this writing, the quick install instructions for Mac OS X are as
follows:</p>

<pre><code>$ curl -L https://www.opscode.com/chef/install.sh | sudo bash
</code></pre>

<p>The Chef Client installer also installs Ruby 1.9.3 for its own use in
the directory <code>/opt/chef/embedded</code>.  You can also use this copy of Ruby
for your own cookbook development.</p>

<p>WARNING: Don’t try to mix and match the Chef Client’s Ruby 1.9.3 together
with a RVM/rbenv Ruby development setup.  Choose one or the other.  If your
Ruby needs go beyond Chef and writing Chef cookbooks, set up a “real”
RVM/rbenv Ruby environment.</p>

<p>Now that you have a Ruby 1.9.3 environment via the Chef Client install, you
can install any extra gem dependencies needed for writing Chef cookbooks by
using the <code>/opt/chef/embedded/bin/gem install</code> command.  For example, here’s
how to install Berkshelf, a popular cookbook authoring support tool:</p>

<pre><code>$ sudo /opt/chef/embedded/bin/gem install berkshelf --no-ri --no-rdoc
Password:
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.7.7.gem (100%)
Fetching: activesupport-3.2.13.gem (100%)
...
Successfully installed safe_yaml-0.9.3
Successfully installed test-kitchen-1.0.0.alpha.7
Successfully installed berkshelf-2.0.3
43 gems installed
</code></pre>

<p>Create a soft link to any gem-installed binaries in an existing PATH directory,
like <code>/usr/local/bin</code></p>

<pre><code># On Mac OS X, /usr/local/bin is not created by default
$ sudo mkdir -p /usr/local/bin
Password:
$ sudo ln -s /opt/chef/embedded/bin/berks /usr/local/bin/berks
$ berks -v
Berkshelf (2.0.3)
</code></pre>

<p>Don’t be tempted to add <code>/opt/chef/embedded/bin</code> to your PATH.  You still want
to keep Opscode’s Ruby install separate from your main system Ruby install.</p>

<h1 id="how-to-set-up-omnibus-chef-ruby-on-linux">How to set up Omnibus Chef Ruby on Linux</h1>
<p>Make sure all the prerequisite packages are installed for the gems you will
be using.</p>

<p>Ubuntu prerequisites:</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install -y curl
$ sudo apt-get install -y build-essential git
$ sudo apt-get install -y libxml2-dev libxslt-dev libssl-dev
</code></pre>

<p>RHEL/CentOS prerequisites:</p>

<pre><code>$ sudo yum update
$ sudo yum install -y curl
$ sudo yum install -y git
$ sudo yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel
$ sudo yum install -y libyaml-devel libffi-devel openssl-devel make bzip2
$ sudo yum install -y autoconf automake libtool bison
$ sudo yum install -y libxml2-devel libxslt-devel
</code></pre>

<p>In a web browser, go to the <a href="http://www.opscode.com/chef/install">http://www.opscode.com/chef/install</a> page to
display the instructions for installing the Chef Client via the Opscode
Omnibus Chef installer for your distribution of Linux.</p>

<p>As of this writing, the quick install instructions for Ubuntu/CentOS are as
follows:</p>

<pre><code>$ curl -L https://www.opscode.com/chef/install.sh | sudo bash
</code></pre>

<p>The Chef Client installer also installs Ruby 1.9.3 for its own use in
the directory <code>/opt/chef/embedded</code>.  You can also use this copy of Ruby
for your own cookbook development.</p>

<p>WARNING: Don’t try to mix and match the Chef Client’s Ruby 1.9.3 together
with a RVM/rbenv Ruby development setup.  Choose one or the other.  If your
Ruby needs go beyond Chef and writing Chef cookbooks, set up a “real”
RVM/rbenv Ruby environment.</p>

<p>Now that you have a Ruby 1.9.3 environment via the Chef Client install, you
can install any extra gem dependencies needed for writing Chef cookbooks by
using the <code>/opt/chef/embedded/bin/gem install</code> command.  For example, here’s
how to install Berkshelf, a popular cookbook authoring support tool:</p>

<pre><code>$ sudo /opt/chef/embedded/bin/gem install berkshelf --no-ri --no-rdoc
Password:
Building native extensions.  This could take a while...
Fetching: httpclient-2.2.0.2.gem (100%)
Fetching: rubyntlm-0.1.1.gem (100%)
Fetching: uuidtools-2.1.4.gem (100%)
...
Successfully installed safe_yaml-0.9.3
Successfully installed test-kitchen-1.0.0.alpha.7
Successfully installed berkshelf-2.0.3
25 gems installed
</code></pre>

<p>Create a soft link to any gem-installed binaries in an existing PATH directory,
like <code>/usr/local/bin</code></p>

<pre><code>$ sudo ln -s /opt/chef/embedded/bin/berks /usr/local/bin/berks
$ berks -v
Berkshelf (2.0.3)
</code></pre>

<p>Don’t be tempted to add <code>/opt/chef/embedded/bin</code> to your PATH.  You still want
to keep Opscode’s Ruby install separate from your main system Ruby install.</p>

<h1 id="how-to-set-up-omnibus-chef-ruby-on-windows">How to set up Omnibus Chef Ruby on Windows</h1>
<p>In a web browser, go to the <a href="http://www.opscode.com/chef/install">http://www.opscode.com/chef/install</a> page to
display the instructions for installing the Chef Client via the Opscode
Omnibus Chef installer for your distribution of Linux.</p>

<p>After you select a Chef verison (pick the latest), you will be provided
a download link to the Omnibus Chef Windows installer.  After downloading
Run the install, choosing the default options.</p>

<p>The Chef Client installer also installs Ruby 1.9.3 for its own use in
the directory <code>C:\opscode\chef\embedded</code>.  You can also use this copy of Ruby
for your own cookbook development.</p>

<p>WARNING: Don’t try to mix and match the Chef Client’s Ruby 1.9.3 together
with a RVM/rbenv Ruby development setup.  Choose one or the other.  If your
Ruby needs go beyond Chef and writing Chef cookbooks, set up a “real”
RVM/rbenv Ruby environment.</p>

<p>Now that you have a Ruby 1.9.3 environment via the Chef Client install, you
can install any extra gem dependencies needed for writing Chef cookbooks by
using the <code>c:\opscode\chef\embedded\bin install</code> command.  For example,
here’s how to install Berkshelf, a popular cookbook authoring support tool:</p>

<pre><code>&gt; c:\opscode\chef\embedded\bin\gem install berkshelf --no-ri --no-rdoc
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.7.7.gem (100%)
Fetching: activesupport-3.2.13.gem (100%)
...
Successfully installed safe_yaml-0.9.3
Successfully installed test-kitchen-1.0.0.alpha.7
Successfully installed berkshelf-2.0.3
43 gems installed
</code></pre>

<p>Add <code>c:\opscode\chef\embedded\bin</code> to your PATH environment variable:
<img src="http://misheska.com/images/opscodechefpathwin.png" alt="Environments Control Panel" /></p>

<p>Restart your Command Prompt to pick up the new environment variable setting,
and then you can run Berkshelf:</p>

<pre><code>&gt; berks -v
Berkshelf (2.0.3)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RVM to manage multiple versions of Ruby]]></title>
    <link href="http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/"/>
    <updated>2013-06-16T00:35:00-07:00</updated>
    <id>http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mac-os-x">Mac OS X</a>    <ul>
      <li><a href="#install-rvm-and-ruby-19x---mac-os-x">Install RVM and Ruby 1.9.x - Mac OS X</a></li>
      <li><a href="#install-ruby-187---mac-os-x">Install Ruby 1.8.7 - Mac OS X</a></li>
      <li><a href="#install-ruby-200---mac-os-x">Install Ruby 2.0.0 - Mac OS X</a></li>
      <li><a href="#remove-rvm---mac-os-x">Remove RVM - Mac OS X</a></li>
    </ul>
  </li>
  <li><a href="#linux">Linux</a>    <ul>
      <li><a href="#install-rvm-and-ruby-19x---linux">Install RVM and Ruby 1.9.x - Linux</a></li>
      <li><a href="#install-ruby-200---linux">Install Ruby 2.0.0 - Linux</a></li>
      <li><a href="#remove-rvm---linux">Remove RVM - Linux</a></li>
    </ul>
  </li>
</ul>

<p>Out of the box, Ruby does not provide a mechanism to support multiple
installed versions.  Compounding this issue, the default system-installed
version of Ruby for most versions of Linux/Mac OS X tend to be quite old.
For example, even in the latest version of Mac OS X Mountain Lion, the
system-wide version of Ruby is over five years old (ruby 1.8.7).  Most
developers prefer to use a newer version of Ruby installed in their home
directory and to leave the default systemwide version of Ruby untouched.</p>

<p><a href="http://rvm.io">Ruby Version Manager (RVM)</a>  makes installing multiple
versions of Ruby easy.  It’s a great way to use Ruby 1.9.x for your current
development while also being able to play with Ruby 2.0 for newer projects.
RVM also supports partitioning of Ruby gem installs via a feature called
gemsets in order to avoid versioning conflicts.  However, with the advent of
<a href="http://gembundler.com">Bundler</a> most developers tend to prefer using Bundler
as the preferred way for managing gems at the application level.</p>

<p>RVM is supported on Linux and Mac OS X.  RVM doesn’t work on Windows.
For Windows, <a href="https://github.com/vertiginous/pik">Pik</a> is an RVM alternative.</p>

<h1 id="mac-os-x">Mac OS X</h1>

<h2 id="install-rvm-and-ruby-19x---mac-os-x">Install RVM and Ruby 1.9.x - Mac OS X</h2>
<p>First, you’ll need to install a C compiler to build Ruby from source.  Just
download and install the latest version of Xcode from the App Store, if you
don’t have it already.  Also make sure you install the <em>Command Line Tools</em>
by choosing the menu item <code>Xcode -&gt; Preferences...</code> and click
on the <em>Downloads</em> tab.  Click on the <em>Install</em> button to download the
Command Line Tools.
<img src="http://misheska.com/images/xcodecommandline.png" alt="Xcode Command Line Tools" /></p>

<p>Next, you’ll need to install the Homebrew package manager.  RVM will
automatically download all dependencies if a package manager is installed.
Also, the dependencies for installing Ruby are complicated enough that it
is helpful to use a package manager to install them, so you can uninstall
them easily if necessary.  Run the following command to install Homebrew:</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</code></pre>

<p>Run <code>brew doctor</code> and address any issues it discovers.  When
all is well, you should see:</p>

<pre><code>$ brew doctor
Your system is raring to brew.
</code></pre>

<p>After Xcode and Homebrew are installed, you can install RVM with the following
commands:</p>

<pre><code>$ \curl -L https://get.rvm.io | bash -s stable
$ source $HOME/.rvm/scripts/rvm
</code></pre>

<p>Run <code>rvm requirements</code> to install additional dependencies:</p>

<pre><code>$ rvm requirements
Installing requirements for osx, might require sudo password.
Already up-to-date.
Cloning into '/usr/local/Library/Taps/homebrew-dupes'...
remote: Counting objects: 906, done.
remote: Compressing objects: 100% (495/495), done.
remote: Total 906 (delta 498), reused 803 (delta 411)
Receiving objects: 100% (906/906), 157.67 KiB | 112 KiB/s, done.
Resolving deltas: 100% (498/498), done.
Tapped 41 formula
Installing required packages: autoconf, automake, libtool, pkg-config, apple-gcc42, libyaml, readline, libxml2, libxslt, libksba, openssl...........................................................................................................................................................
Updating certificates in '/usr/local/etc/openssl/cert.pem'.
</code></pre>

<p>Tell rvm to automatically install dependencies via Homebrew with the following command:</p>

<pre><code>$ rvm autolibs osx_brew
</code></pre>

<p>Next, build and install the latest version of Ruby by running the following
(this will take a long time):</p>

<pre><code>$ rvm install 1.9.3
</code></pre>

<p>You may get an error message saying “There was an error while trying to
resolve rubygems version for ‘latest’.  Halting the installation.” Just
run the install again like so to fix the issue:</p>

<pre><code>$ rvm reinstall 1.9.3
</code></pre>

<p>Verify the RVM install by running the following commands:</p>

<pre><code>$ rvm -h
$ rvm list
$ rvm use 1.9.3
$ rvm rubygems latest
</code></pre>

<p>To ensure that the newer Ruby 1.9.3 is used by default instead of the
system 1.8.7 version, run the following command:</p>

<pre><code>$ rvm use 1.9.3 --default
</code></pre>

<p>If you’d like to manage RVM with a GUI, check out <a href="http://jewelrybox.unfiniti.com/">JewelryBox</a>:</p>

<p><img src="http://misheska.com/images/jewelrybox.png" alt="Jewelry Box" /></p>

<h2 id="install-ruby-187---mac-os-x">Install Ruby 1.8.7 - Mac OS X</h2>
<p>For legacy GUI support, Ruby 1.8.7 has some dependencies on tcl/tk, which
Mountain Lion no longer installs by default (now that X11 is an optional
install).  To compile Ruby 1.8.7 without tcl/tk support, use the following
command overrides on <code>rvm install</code>:</p>

<pre><code>$ rvm install 1.8.7 --with-gcc=clang --without-tcl --without-tk
</code></pre>

<p>To compile Ruby 1.8.7 with tcl/tk support, install X11 via
<a href="http://xquartz.macosforge.org/landing">http://xquartz.macosforge.org/landing</a>
then compile Ruby 1.8.7 with the following:</p>

<pre><code>$ export CPPFLAGS=-I/opt/X11/include
$ CC=/usr/local/bin/gcc-4.2 rvm install 1.8.7
</code></pre>

<h2 id="install-ruby-200---mac-os-x">Install Ruby 2.0.0 - Mac OS X</h2>
<p>Installing Ruby 2.0 is very straightforward, just run the following:</p>

<pre><code>$ rvm install 2.0.0
</code></pre>

<p>Verify the Ruby 2.0 install by running the following commands:</p>

<pre><code>$ rvm use 2.0.0
$ ruby -v
ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-darwin12.3.0]
</code></pre>

<p>If you want to make Ruby 2.0 your default version of ruby, run the following:</p>

<pre><code>$ rvm use 2.0.0 --default
</code></pre>

<h2 id="remove-rvm---mac-os-x">Remove RVM - Mac OS X</h2>
<p>Should you want to uninstall/remove RVM, it’s pretty easy.  First, run
the following commands:</p>

<pre><code>$ rvm implode
$ gem uninstall rvm
</code></pre>

<p>Then just follow the instructions from <code>rvm implode</code>:</p>

<ul>
  <li>
    <p>Delete the following files, if they exist:
<code>/etc/rvmrc</code>
<code>$HOME/.rvmrc</code></p>
  </li>
  <li>
    <p>Also, remove the lines sourcing RVM scripts from 
<code>$HOME/.bash_profile</code> <code>/etc/zprofile</code> and 
<code>/etc/profile.d/rvm.sh</code> if they exist.  (A reboot doesn’t hurt
after you do this, just to make sure).</p>
  </li>
</ul>

<p>To uninstall Homebrew, run the following:</p>

<pre><code>cd `brew --prefix`
brew install libtool
rm -rf Cellar
rm `git ls-files`
rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions
rm -rf .git
rm -rf ~/Library/Caches/Homebrew
</code></pre>

<h1 id="linux">Linux</h1>

<h2 id="install-rvm-and-ruby-19x---linux">Install RVM and Ruby 1.9.x - Linux</h2>
<p>RVM installation is more straightforward on Linux, as the Ruby source was
designed for the GCC compiler that ships with any Linux distribution.</p>

<p>First install <code>curl</code>, so that you can fetch the RVM script.
For Ubuntu, run
the following command:</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install -y curl
</code></pre>

<p>For RedHat/CentOS:</p>

<pre><code>$ sudo yum update
$ sudo yum install -y curl
</code></pre>

<p>With curl installed, run the RVM install with the following commands:</p>

<pre><code>$ \curl -L https://get.rvm.io | bash -s stable
$ source $HOME/.rvm/scripts/rvm
</code></pre>

<p>On Ubuntu, run <code>rvm requirements</code> to install additional dependencies:</p>

<pre><code>$ rvm requirements
</code></pre>

<p>For CentOS, <code>rvm requirements</code> will need to download packages from EPEL, so
add the <code>--verify-downloads 1</code> parameter after the <code>rvm requirements</code> command:</p>

<pre><code>$ rvm requirements --verify-downloads 1
</code></pre>

<p>Next build and install Ruby 1.9.3 (this will take awhile):</p>

<pre><code>$ rvm install 1.9.3
$ rvm use 1.9.3
$ rvm rubygems latest
</code></pre>

<p>Verify rvm install:</p>

<pre><code>$ rvm -h
$ rvm list
$ rvm use 1.9.3
$ ruby -v
ruby 1.9.3p429 (2013-05-15 revision 40747) [x86_64-linux]
</code></pre>

<h2 id="install-ruby-200---linux">Install Ruby 2.0.0 - Linux</h2>
<p>Installing Ruby 2.0 is very straightforward, just run the following:</p>

<pre><code>$ rvm install 2.0.0
</code></pre>

<p>Verify the Ruby 2.0 install by running the following commands:</p>

<pre><code>$ rvm use 2.0.0
$ ruby -v
ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-linux]
</code></pre>

<p>If you want to make Ruby 2.0 your default version of ruby, run the following:</p>

<pre><code>$ rvm use 2.0.0 --default
</code></pre>

<h2 id="remove-rvm---linux">Remove RVM - Linux</h2>
<p>Should you want to uninstall/remove RVM, it’s pretty easy.  First, run
the following commands:</p>

<pre><code>$ rvm implode
$ gem uninstall rvm
</code></pre>

<p>Then just follow the instructions from <code>rvm implode</code>:</p>

<ul>
  <li>
    <p>Delete the following files, if they exist:
<code>/etc/rvmrc</code>
<code>$HOME/.rvmrc</code></p>
  </li>
  <li>
    <p>Also, remove the lines sourcing RVM scripts from
<code>$HOME/.bash_profile</code> <code>/etc/zprofile</code> and
<code>/etc/profile.d/rvm.sh</code> if they exist.  (A reboot doesn’t hurt
after you do this, just to make sure).</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rbenv to manage multiple versions of Ruby]]></title>
    <link href="http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby/"/>
    <updated>2013-06-15T15:53:00-07:00</updated>
    <id>http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mac-os-x">Mac OS X</a>    <ul>
      <li><a href="#install-rbenv-and-ruby-19x---mac-os-x">Install Rbenv and Ruby 1.9.x - Mac OS X</a></li>
      <li><a href="#install-bundler---mac-os-x">Install Bundler - Mac OS X</a></li>
      <li><a href="#install-ruby-200---mac-os-x">Install Ruby 2.0.0 - Mac OS X</a></li>
      <li><a href="#upgrade-rbenv---mac-os-x">Upgrade Rbenv - Mac OS X</a></li>
      <li><a href="#remove-rbenv---mac-os-x">Remove Rbenv - Mac OS X</a></li>
    </ul>
  </li>
  <li><a href="#linux">Linux</a>    <ul>
      <li><a href="#install-rbenv-and-ruby-19x---linux">Install Rbenv and Ruby 1.9.x - Linux</a></li>
      <li><a href="#install-bundler---linux">Install Bundler - Linux</a></li>
      <li><a href="#install-ruby-200---linux">Install Ruby 2.0.0 - Linux</a></li>
      <li><a href="#upgrade-rbenv---linux">Upgrade Rbenv - Linux</a></li>
      <li><a href="#remove-rbenv---linux">Remove Rbenv - Linux</a></li>
    </ul>
  </li>
</ul>

<p>Out of the box, Ruby does not provide a mechanism to support multiple
installed versions.  Compounding this issue, the default system-installed
version of Ruby for most versions of Linux/Mac OS X tend to be quite old.
For example, even in the latest version of Mac OS X Mountain Lion, the
system-wide version of Ruby is over five years old (ruby 1.8.7).  Most
developers prefer to use a newer version of Ruby installed in their home
directory and to leave the default systemwide version of Ruby untouched.</p>

<p><a href="https://github.com/sstephenson/rbenv/">Rbenv</a> makes managing multiple
versions of Ruby easy.  It’s a great way to work on current development
projects using Ruby 1.9.x and be able to switch to Ruby 2.0.x for new
work.  Rbenv is a lightweight alternative to
<a href="http://rvm.io">Ruby Version Manager (RVM)</a>.  Rbenv does not include
any mechanism to install Ruby or manage gems, like with RVM.</p>

<p>Rbenv is supported on Linux and Mac OS X.  Rbenv doesn’t work on Windows.
For Windows, <a href="https://github.com/vertiginous/pik">Pik</a> is an Rbenv alternative.</p>

<p>NOTE: Rbenv is incompatible with RVM because RVM overrides the
<code>gem</code> command with a function.  If you want to switch to Rbenv,
make sure you uninstall RVM first.  Run the following commands to uninstall
RVM:</p>

<pre><code>$ rvm implode
$ gem uninstall rvm
</code></pre>

<p>Then remove/comment out the RVM loader line in <code>.bash_profile</code>
and/or <code>.bashrc</code></p>

<h1 id="mac-os-x">Mac OS X</h1>

<h2 id="install-rbenv-and-ruby-19x---mac-os-x">Install Rbenv and Ruby 1.9.x - Mac OS X</h2>
<p>First you’ll need to install a C compiler to build Ruby from source.  Just
download and install the latest version of Xcode from the App Store, if you
don’t have it installed already.  Also make sure you install the <em>Command Line
Tools</em> by choosing the menu item <code>Xcode -&gt; Preferences...</code> and click
on the <em>Downloads</em> tab.  Click on the <em>Install</em> button to download the
Command Line Tools.
<img src="http://misheska.com/images/xcodecommandline.png" alt="Xcode Command Line Tools" /></p>

<p>Next, you’ll need to install the Homebrew package manager to get all the
dependencies needed to compile Ruby from source.  While you could manage
these dependencies by hand, using a package manager is a better idea, as
package managers know how to uninstall what they install.</p>

<p>Run the following command to install Homebrew:</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</code></pre>

<p>Run <code>brew doctor</code> and address any issues it discovers.  When
all is well, you should see:</p>

<pre><code>$ brew doctor
Your system is raring to brew.
</code></pre>

<p>Next, install the additional dependencies to compile Ruby from source:</p>

<pre><code># For update-system
brew update
brew tap homebrew/dupes
# For ruby
brew install apple-gcc42
</code></pre>

<p>And now install <code>rbenv</code> and the <code>ruby-build</code> plugin:</p>

<pre><code>brew update
brew install rbenv
brew install ruby-build
</code></pre>

<p>Add <code>rbenv init</code> to your shell to enable shims and autocompletion:</p>

<pre><code>$ echo 'eval "$(rbenv init -)"' &gt;&gt; $HOME/.bash_profile
$ source ~/.bash_profile
</code></pre>

<p>Restart shell as a login shell so that the PATH changes take effect:</p>

<pre><code>$ exec $SHELL -l
</code></pre>

<p>Install the latest version of ruby 1.9.x (at the time of this writing 1.9.3-p429)</p>

<pre><code>$ rbenv install 1.9.3-p429
</code></pre>

<p>Rebuild the shim executable</p>

<pre><code>$ rbenv rehash
</code></pre>

<p>You’ll need to run <code>rbenv rehash</code> every time you install a new version of Ruby
or install a new gem.</p>

<p>Set the latest version of ruby to be the default version of ruby</p>

<pre><code>$ rbenv global 1.9.3-p429
</code></pre>

<p>Verify the ruby install.  If everything was installed correctly, the <code>ruby -v</code>
command should report that version 1.9.3p429 is installed.</p>

<pre><code>$ ruby -v
ruby 1.9.3p429 (2013-05-15 revision 40747) [x86_64-darwin12.4.0]
</code></pre>

<h2 id="install-bundler---mac-os-x">Install Bundler - Mac OS X</h2>
<p>You’ll need to use <a href="http://gembundler.com/">Bundler</a> to manage gems.  Installing
a gem is also a good way to ensure that you’ve installed most of the Ruby
prerequisites.</p>

<p>First, make sue you update to the latest version of Rubygems:</p>

<pre><code>$ gem update --system
</code></pre>

<p>Then install the <code>bundler</code> gem.  If the <code>gem install</code> command reports
<code>Successfully installed</code> you’re good to go:</p>

<pre><code>$ gem install bundler
Successfully installed bundler-1.3.5
Parsing documentation for bundler-1.3.5
1 gem installed
$ rbenv rehash
</code></pre>

<h2 id="install-ruby-200---mac-os-x">Install Ruby 2.0.0 - Mac OS X</h2>
<p>As of this writing, Ruby 2.0.0-p195 is the latest version of Ruby 2.0.0.
Use <code>rbenv install --list</code> to print out the available versions.  Currently
there is an <a href="https://github.com/sstephenson/ruby-build/issues/305">issue installing Ruby 2.0.0</a>
with the OpenSSL that ruby-build downloads, so we have to set 
<code>RUBY_CONFIGURE_OPTS</code> when calling <code>rbenv install</code> as a workaround:</p>

<pre><code>$ brew install openssl
$ CONFIGURE_OPTS="--with-out-ext=tk,tk/* --with-openssl-dir=`brew --prefix openssl`" RUBY_CONFIGURE_OPTS="--with-openssl-dir=`brew --prefix openssl`" rbenv install 2.0.0-p195
</code></pre>

<p>To verify the install:</p>

<pre><code>$ rbenv local 2.0.0-p195
$ ruby -v
ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-darwin12.4.0]
</code></pre>

<p>If you want to make Ruby 2.0.0 the global default version of ruby:</p>

<pre><code>$ rbenv global 2.0.0-p195
</code></pre>

<h2 id="upgrade-rbenv---mac-os-x">Upgrade Rbenv - Mac OS X</h2>
<p>To upgrade rbenv via homebrew:</p>

<pre><code>$ brew update
$ brew upgrade rbenv
$ brew upgrade ruby-build
</code></pre>

<h2 id="remove-rbenv---mac-os-x">Remove Rbenv - Mac OS X</h2>
<p>Uninstall the packages you installed via homebrew:</p>

<pre><code>brew uninstall rbenv
brew uninstall ruby-build
</code></pre>

<p>Remove the following directory:</p>

<pre><code>rm -rf $HOME/.rbenv
</code></pre>

<p>And remember to remove whatever you added to <code>$HOME/.bash_profile</code></p>

<h1 id="linux">Linux</h1>

<h2 id="install-rbenv-and-ruby-19x---linux">Install Rbenv and Ruby 1.9.x - Linux</h2>
<p>Make sure the prerequisite packages are installed.</p>

<p>Ubuntu prerequisites:</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install -y build-essential git
$ sudo apt-get install -y libxml2-dev libxslt-dev libssl-dev
</code></pre>

<p>RHEL/CentOS prerequisites:</p>

<pre><code>$ sudo yum update
$ sudo yum install -y git
$ sudo yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel
$ sudo yum install -y libyaml-devel libffi-devel openssl-devel make bzip2
$ sudo yum install -y autoconf automake libtool bison
$ sudo yum install -y libxml2-devel libxslt-devel 
</code></pre>

<p>Download the rbenv source distribution to
$HOME/.rbenv:</p>

<pre><code>$ git clone git://github.com/sstephenson/rbenv.git $HOME/.rbenv
</code></pre>

<p>Add $HOME/.rbenv/bin to your $PATH</p>

<pre><code>$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; $HOME/.bashrc
</code></pre>

<p>Add <code>rbenv init</code> to your shell to enable shims and autocompletion:</p>

<pre><code>$ echo 'eval "$(rbenv init -)"' &gt;&gt; $HOME/.bashrc
</code></pre>

<p>Restart shell as a login shell so that the PATH changes take effect:</p>

<pre><code>$ exec $SHELL -l
</code></pre>

<p>Install the <code>ruby-build</code> plugin, which provides an
<code>rbenv install</code> command to simplify the process of compiling
and install new Ruby versions:</p>

<pre><code>$ git clone git://github.com/sstephenson/ruby-build.git $HOME/.rbenv/plugins/ruby-build
</code></pre>

<p>Install the latest version of ruby 1.9.x (at the time of this writing 1.9.3-p429)</p>

<pre><code>$ rbenv install 1.9.3-p429
</code></pre>

<p>Rebuild the shim executable</p>

<pre><code>$ rbenv rehash
</code></pre>

<p>You’ll need to run <code>rbenv rehash</code> every time you install a new
version of Ruby or install a new gem.</p>

<p>Set the latest version of ruby to be the default version of ruby</p>

<pre><code>$ rbenv global 1.9.3-p429
</code></pre>

<p>Verify the ruby install.  If everything was installed correctly, the
<code>ruby -v</code> command should report that version 1.9.3p429 is installed.</p>

<pre><code>$ ruby -v
ruby 1.9.3p429 (2013-05-15 revision 40747) [x86_64-linux]
</code></pre>

<h2 id="install-bundler---linux">Install Bundler - Linux</h2>

<p>You’ll need to use <a href="http://gembundler.com/">Bundler</a> to manage gems.
Installing a gem is also a good way to ensure that you’ve installed most
of the Ruby prerequisites.</p>

<p>First, make sure you update to the latest version of Rubygems:</p>

<pre><code>$ gem update --system
</code></pre>

<p>Then install the <code>bundler</code> gem.  If the <code>gem install</code> command reports
<code>Successfully installed</code> you’re good to go:</p>

<pre><code>$ gem install bundler
Successfully installed bundler-1.3.5
Parsing documentation for bundler-1.3.5
1 gem installed
$ rbenv rehash
</code></pre>

<h2 id="install-ruby-200---linux">Install Ruby 2.0.0 - Linux</h2>
<p>As of this writing, Ruby 2.0.0-p195 is the latest version of Ruby 2.0.0.
Use <code>rbenv install --list</code> to print out the available versions.  To install:</p>

<pre><code>$ rbenv install 2.0.0-p195
</code></pre>

<p>To verify the install:</p>

<pre><code>$ rbenv local 2.0.0-p195
$ ruby -v
ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-linux] 
</code></pre>

<p>If you want to make Ruby 2.0.0 the global default version of ruby:</p>

<pre><code>$ rbenv global 2.0.0-p195
</code></pre>

<h2 id="upgrade-rbenv---linux">Upgrade Rbenv - Linux</h2>
<p>Since Rbenv is a Git repository, upgrading is just a matter of refreshing the
source:</p>

<pre><code>$ cd $HOME/.rbenv
$ git pull
</code></pre>

<h2 id="remove-rbenv---linux">Remove Rbenv - Linux</h2>
<p>To uninstall/remove Rbenv, remove the following directory:</p>

<pre><code>$ rm -rf $HOME/.rbenv
</code></pre>

<p>And remember to remove whatever you added to <code>$HOME/.bash_profile</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using pik to manage multiple versions of Ruby on Windows]]></title>
    <link href="http://misheska.com/blog/2013/03/10/using-pik-to-manage-multiple-versions-of-ruby-on-windows/"/>
    <updated>2013-03-10T18:09:00-07:00</updated>
    <id>http://misheska.com/blog/2013/03/10/using-pik-to-manage-multiple-versions-of-ruby-on-windows</id>
    <content type="html"><![CDATA[<p>Out of the box, Ruby does not provide a mechanism to support multiple installed
versions.  <code>pik</code> is a third-party tool that can be used to switch
between multiple versions of the Ruby interpreter on Windows.</p>

<h1 id="install-ruby">Install Ruby</h1>
<p>Install at least one Ruby interpreter environment using the RubyInstaller
from <a href="http://rubyinstaller.org">http://rubyinstaller.org</a>.  While pik can
install some versions of Ruby, the versions of Ruby it knows to install is
quite limited, and it is just much easier to use RubyInstaller for Windows
to install them.</p>

<p>The choice of Ruby environments to install is up to you.  I have the latest
version of 1.9.3 installed as my main development environment, and Ruby 2.0.0 
to play around with the next generation of the language.  When you install
Ruby, do not add the Ruby executables to your PATH or associate .rb/.rbw
files with the Ruby installation (the default choice) - <code>pik</code> will
manage this setting:</p>

<p><img src="http://misheska.com/images/rubyinstaller.png" alt="Ruby Installer" /></p>

<h1 id="installing-pik">Installing pik</h1>
<p>Download the latest .MSI installer from <a href="https://github.com/vertiginous/pik/downloads">pik downloads on github</a>
(as of this writing <a href="https://github.com/downloads/vertiginous/pik/pik-0.3.0.pre.msi">0.3.0</a>) and run the Pik Setup Wizard - the default options are fine:</p>

<p><img src="http://misheska.com/images/pikinstaller.png" alt="Pik Installer" /></p>

<p>You can verify that <code>pik</code> installed properly by running the
following in a Command Prompt:</p>

<pre><code>&gt; pik --version
pik 0.3.0.pre on Microsoft Windows [Version 6.1.7601]
by Gordon Thiesfeld (gthiesfeld@gmail.com)
</code></pre>

<h1 id="registering-ruby-environments-with-pik">Registering Ruby environments with pik</h1>
<p>Use the <code>pik add</code> command to register your installed ruby
environments with pik.  For example, I have Ruby 1.8.7, 1.9.3, and 2.0.0
installed on my Windows development box, so I typed the following in a
Command Prompt:</p>

<pre><code>&gt; pik add C:\Ruby187\bin
INFO: Adding:  [ruby-]1.8.7-p371
      Located at:  C:\Ruby187\bin

&gt; pik add C:\Ruby193\bin
INFO: Adding:  [ruby-]1.9.3-p392
      Located at:  C:\Ruby193\bin

&gt; pik add C:\Ruby200\bin
INFO: Adding:  [ruby-]2.0.0-p0
      Located at:  C:\Ruby2000\bin
</code></pre>

<p>Use the <code>pik list</code> command to list all the ruby interpreters
registered with pik:</p>

<pre><code>&gt; pik list
   ruby-1.8.7-p371
   ruby-1.9.3-p392
   ruby-2.0.0-p0
</code></pre>

<h1 id="set-a-default-ruby">Set a default Ruby</h1>
<p>The <code>pik use</code> command will allow you to switch between your
registered ruby interpreters:</p>

<pre><code>&gt; pik use ruby-2.0.0-p0
&gt; ruby -v
ruby 2.0.0p0 (2013-02-024) [i386-mingw32]
</code></pre>

<p>Add the <code>--default</code> parameter to set one version as the default:</p>

<pre><code>&gt; pik use ruby-1.9.3-p392 --default
</code></pre>

<p>You can use the <code>pik default</code> command to switch to this version:</p>

<pre><code>&gt; pik default
&gt; ruby -v
ruby 1.9.3p392 (2013-02-022) [i386-mingw32]
</code></pre>

<p>Unfortunately when you open a new command prompt, pik is not automatically
loaded, so you will notice that there is no default ruby loaded:</p>

<p><img src="http://misheska.com/images/rubynewcommand.png" alt="Ruby not found'" /></p>

<p>Either run the <code>pik default</code> command to load pik (and the
default ruby interpreter) or add one particular Ruby interpreter to your
user or system PATH environment variable (via <code>Control Panel -&gt; System
-&gt; Advanced -&gt; Environment Variables….</code>):</p>

<p><img class="left" src="http://misheska.com/images/environment1.png" width="350" height="394" title="'Environment control panel'" />
<img class="right" src="http://misheska.com/images/environment2.png" width="350" height="394" title="'User PATH'" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try out Sensu Monitoring using Virtual Box, Vagrant and Chef]]></title>
    <link href="http://misheska.com/blog/2013/02/28/try-out-sensu-monitoring-using-virtual-box%2C-vagrant-and-chef/"/>
    <updated>2013-02-28T22:54:00-08:00</updated>
    <id>http://misheska.com/blog/2013/02/28/try-out-sensu-monitoring-using-virtual-box,-vagrant-and-chef</id>
    <content type="html"><![CDATA[<p>I’ve been using Sensu Monitoring in production for about three to four months
now.  It’s a nice, lightweight monitoring framework, designed with the cloud
in mind and for use with modern configuration management frameworks like
Chef and Puppet.  For more information on Sensu, check out the article
<a href="https://github.com/sensu/sensu/wiki">Why Sonian created Sensu (by Sean Porter)</a>
and the associated articles and links on the <a href="https://github.com/sensu/sensu/wiki">Sensu Wiki</a></p>

<p>In this article, I’m going to present a quick overview on how to test and
evaluate Sensu using the <a href="https://github.com/sensu/sensu-chef">Sensu Chef Cookbook</a>
Through the magic of Oracle VirtualBox and Vagrant, combined with Chef, you
can quickly deploy Sensu to a local virtual machine instance, and kick the
tires on Sensu to evaluate whether or not it is a good monitoring solution
for you.  These instructions apply to Mac OS X, Linux, and/or Windows for
the host operating system.</p>

<h1 id="install-virtualbox">Install VirtualBox</h1>
<p>VirtualBox is an open source virtualization platform, similar to VMWare
Fusion/Workstation that runs on Mac OS X, Linux and Windows (and a few more
platforms).  While I personally prefer VMWare Fusion to VirtualBox (VirtualBox
can be a bit flakey at times), a lot of automation around VirtualBox has been
developed within the Chef community, which impossible to ignore.  Fortunately
on both Mac OS X and Linux, VirtualBox can peacefully coexist with VMWare
Fusion/Workstation (NOTE: If you use KVM virtualization on Linux, VirtualBox
can also coexist, but you need to be careful not to run VirtualBox and KVM
images simultaneously).</p>

<p>Just download and run the VirtualBox installer from the <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox download
page</a>.  Just download and install
the latest 4.2.x version of VirtualBox.  Make sure you save the VirtualBox
installer as it comes with an uninstall tool, should you wish to remove
VirtualBox at some point in the future.</p>

<h1 id="install-vagrant">Install Vagrant</h1>
<p>After installing VirtualBox, next install Vagrant.  Vagrant is an automation
framework for VirtualBox.  Grab the latest Vagrant installer for your OS from
the <a href="http://downloads.vagrantup.com/">Vagrant Downloads page</a> and run install.
On Mac OS X and Windows, the Vagrant install will automatically add the Vagrant
binaries to your PATH, on Linux, you will need to manually add
<code>/opt/vagrant/bin</code> per the <a href="http://docs.vagrantup.com/v1/docs/getting-started/index.html">Getting Started with Vagrant docs</a>.</p>

<h1 id="download-the-sensu-chef-cookbook">Download the sensu-chef cookbook</h1>
<p>Grab the latest version of the sensu-chef cookbook from GitHub by running
the following command:</p>

<pre><code>git clone https://github.com/sensu/sensu-chef.git
</code></pre>

<h1 id="install-ruby--rubygems">Install Ruby &amp; RubyGems</h1>
<p>The sensu-chef cookbook requires Ruby &amp; RubyGems.</p>

<p>On Mac OS X and Linux, I strongly recommend that you use either RVM or Rbenv
to make sure that you are using the latest version of Ruby instead of whatever
version of Ruby your system installs by default.</p>

<p>See my previous articles on <a href="http://misheska.com/blog/2013/02/24/using-rvm-to-manage-multiple-versions-of-ruby/">RVM</a> or <a href="http://misheska.com/blog/2013/02/24/using-rbenv-to-manage-multiple-versions-of-ruby/">Rbenv</a>.  NOTE: If you don’t
know whether or not to decide between RVM or Rbenv, go with RVM.</p>

<h1 id="patch-chef-sensu-vagrantfile">Patch chef-sensu Vagrantfile</h1>
<p>As of this writing, the <code>Vagrantfile</code> included in
<code>sensu-chef/examples</code> will not set up the VM properly and the
Chef run will fail with the following error:</p>

<pre><code>[default] Running chef-solo...
stdin: is not a tty
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: *** Chef 0.10.8 ***
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Setting the run_list to ["recipe[monitor::master]", "recipe[monitor::redis]", "recipe[monitor::rabbitmq]"] from JSON
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Run List is [recipe[monitor::master], recipe[monitor::redis], recipe[monitor::rabbitmq]]
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Run List expands to [monitor::master, monitor::redis, monitor::rabbitmq]
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Starting Chef Run for ubuntu-1204-i386
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Running start handlers
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Start handlers complete.
[Fri, 01 Mar 2013 08:28:07 +0000] ERROR: Running exception handlers
[Fri, 01 Mar 2013 08:28:07 +0000] ERROR: Exception handlers complete
[Fri, 01 Mar 2013 08:28:07 +0000] FATAL: Stacktrace dumped to /tmp/vagrant-chef-1/chef-stacktrace.out
[Fri, 01 Mar 2013 08:28:07 +0000] FATAL: NoMethodError: undefined method `default_action' for #&lt;Class:0x8decb20&gt;
Chef never successfully completed! Any errors should be visible in the output above. Please fix your recipes so that they properly complete.
</code></pre>

<p>I’ve created a revised <code>Vagrantfile</code> which fixes this issue.
Download this amended version and copy it in place of
<code>sensu-client/examples/Vagrantfile</code></p>

<div><script src="https://gist.github.com/5063291.js?file=Vagrantfile"></script>
<noscript><pre><code>#require 'berkshelf/vagrant'

Vagrant::Config.run do |config|
  config.vm.box = &quot;ubuntu-1204-i386&quot;
  config.vm.box_url = &quot;http://vagrant.sensuapp.org/ubuntu-1204-i386.box&quot;

  config.vm.customize [
    &quot;modifyvm&quot;, :id,
    &quot;--name&quot;, &quot;Sensu Stack&quot;,
    &quot;--memory&quot;, &quot;1024&quot;
  ]

  config.vm.provision :shell, :inline =&gt; &quot;apt-get install -y curl&quot;
  config.vm.provision :shell, :inline =&gt; &quot;curl -L https://www.opscode.com/chef/install.sh | bash&quot;

  config.vm.forward_port 8080, 8080
  config.vm.forward_port 9000, 9000

  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = &quot;cookbooks&quot;
    chef.data_bags_path = &quot;data_bags&quot;
    chef.add_recipe &quot;monitor::master&quot;
    chef.add_recipe &quot;monitor::redis&quot;
    chef.add_recipe &quot;monitor::rabbitmq&quot;
  end
end
</code></pre></noscript></div>

<h1 id="install-ruby-devkit-windows">Install Ruby DevKit (Windows)</h1>
<p>The sensu-chef recipe is dependent on the json gem.  On Windows, you will get
the following error if you do not have the proper Ruby DevKit installed:</p>

<pre><code>Installing json (1.7.7)
Gem::InstallError: The 'json' native gem requires installed build tools.
</code></pre>

<p>Go to <a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a>
and refer to the <em>Which Development Kit?</em> section of the web page about which
DevKit you need to install.</p>

<p>Download the appropriate DevKit toolkit, extract it and run the following
in a Command Prompt:</p>

<pre><code>&gt; ruby dk.rb init
[INFO] found RubyInstaller v1.9.3 at C:/Ruby193

Initialization complete! Please review and modify the auto-generated
'config.yml' file to ensure it contains the root directories to all
of the installed Rubies you want enhanced by the DevKit.

&gt; ruby dk.rb install
[INFO] Updating convenience notice gem override for 'C:/Ruby193'
[INFO] Installing 'C:/Ruby193/lib/ruby/site_ruby/devkit.rb'
</code></pre>

<h1 id="create-the-sensu-chef-virtual-machine">Create the sensu-chef virtual machine</h1>

<p>Run the following commands to create the sensu-chef virtual machine:</p>

<pre><code>cd sensu-chef/examples
gem install bundler
# On Windows, restart the command prompt before running 'bundle install' as
# gem install will reset the PATH
bundle install
librarian-chef install
vagrant up
</code></pre>

<p>If all goes well, the <code>chef-solo</code> run should have succeeded, and
you should be able to view the Sensu dashboard by going to the following URL
with the username <code>admin</code> and the password <code>secret</code>:
<a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img src="http://misheska.com/images/sensudashboard.png" alt="Sensu Dashboard" /></p>

<p>If this is successful, on Mac OX and Linux, just run the following command to
log in to your newly-created virtual machine instance:</p>

<pre><code>vagrant ssh
</code></pre>

<p>On Windows, run the following command (or use a visual SSH client like PuTTY):</p>

<pre><code>ssh vagrant@127.0.0.1 -p 2222 -i C:/Users/misheska/.vagrant.d/insecure_private_key
</code></pre>

<p>And refer to the <a href="https://github.com/sensu/sensu/wiki">Sensu wiki</a> on how 
to experiment with various configuration options.</p>

<p>When you are done playing with the test VM, run the following command to
destroy the VM:</p>

<pre><code>vagrant destroy
</code></pre>
]]></content>
  </entry>
  
</feed>
